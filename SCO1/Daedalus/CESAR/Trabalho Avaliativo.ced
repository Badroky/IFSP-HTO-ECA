; ====================================================================
; Trabalho Avaliativo
; ====================================================================

; --- Registradores Utilizados ---
; R0: Armazena o caractere atual (lido da string ou do teclado).
; R1: Ponteiro para a string que está sendo exibida na memória.
; R2: Ponteiro para a posição atual no visor do CESAR.
; R4: Registrador temporário para as comparações de entrada (S/N).

                ORG     0       ; Define que o programa começa no endereço 0

INICIO:
                ; Inicializa os ponteiros.
                MOV     #NOME_E_HT, R1  ; R1 aponta para o início da nossa string de dados.
                MOV     #65500, R2      ; R2 aponta para o início da memória do visor.

; Este laço imprime a string na tela caractere por caractere.
LACO_PRINT:
                MOV     (R1)+, R0       ; Carrega um caractere da string em R0 e avança o ponteiro R1.
                BEQ     LER_TECLA       ; Se o caractere for 0 (fim da string), pula para a parte de leitura do teclado.
                
                ; --- CORREÇÃO APLICADA AQUI ---
                MOV     R0, (R2)        ; Escreve o caractere na posição ATUAL do visor.
                INC     R2              ; AVANÇA o ponteiro do visor em apenas 1 byte.
                ; --- FIM DA CORREÇÃO ---

                BR      LACO_PRINT      ; Volta para imprimir o próximo caractere.

; Esta seção aguarda a entrada do usuário.
LER_TECLA:
                CLR     65498           ; Limpa o status do teclado para garantir que podemos receber uma nova tecla.
ESPERA_TECLA:
                TST     65498           ; Testa o status do teclado para ver se algo foi digitado.
                BEQ     ESPERA_TECLA    ; Se o status for zero, nenhuma tecla foi pressionada. Fica em laço esperando.

                ; Se saiu do laço, uma tecla foi pressionada.
                MOV     65499, R0       ; Lê o código ASCII da tecla para o registrador R0.

                ; Compara a tecla lida com 'S' maiúsculo.
                MOV     #'S', R4
                CMP     R4, R0
                BEQ     FIM_PROGRAMA    ; Se for igual, pula para o fim.

                ; Compara a tecla lida com 's' minúsculo.
                MOV     #'s', R4
                CMP     R4, R0
                BEQ     FIM_PROGRAMA    ; Se for igual, pula para o fim.

                ; Compara a tecla lida com 'N' maiúsculo.
                MOV     #'N', R4
                CMP     R4, R0
                BEQ     FIM_PROGRAMA    ; Se for igual, pula para o fim.

                ; Compara a tecla lida com 'n' minúsculo.
                MOV     #'n', R4
                CMP     R4, R0
                BEQ     FIM_PROGRAMA    ; Se for igual, pula para o fim.

                ; Se a tecla não for nenhuma das válidas, ignora e volta a esperar por uma nova entrada.
                BR      LER_TECLA

FIM_PROGRAMA:
                HLT                     ; Para a execução do programa.

; ====================================================================
; --- Área de Dados ---
; ====================================================================
                ORG     1024            ; Define que os dados começarão no endereço de memória 1024.

NOME_E_HT:
                ; Cada caractere é definido com 'dw' (Define Word) porque a instrução
                ; 'MOV (R1)+' lê palavras de 16 bits, não bytes de 8 bits.
                dw      'V'
                dw      'i'
                dw      'n'
                dw      'i'
                dw      'c'
                dw      'i'
                dw      'u'
                dw      's'
                dw      ' '
                dw      'F'
                dw      'r'
                dw      'a'
                dw      'n'
                dw      'c'
                dw      'o'
                dw      ' '
                dw      'H'
                dw      'T'
                dw      '3'
                dw      '0'
                dw      '5'
                dw      '0'
                dw      '3'
                dw      '2'
                dw      '7'
                dw      ' '
                dw      '>'
                dw      ' '
                dw      0               ; Fim da string